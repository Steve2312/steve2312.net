name: release
run-name: Release frontend, triggered by ${{ github.actor }}
on:
  push:
    branches: [ master ]
jobs:
#  build:
#    runs-on: ubuntu-latest
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v3
#
#      - name: Setup node
#        uses: actions/setup-node@v3
#        with:
#          node-version: '18.16.0'
#
#      - name: Install node dependencies
#        run: npm ci
#
#      - name: Build node project
#        run: npm run build
#
#      - name: Upload build artifacts
#        uses: actions/upload-artifact@v3
#        with:
#          name: build-artifacts
#          path: dist

  increment-version:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Fetch all tags
        run: git fetch --tags

      - name: Get tag version
        run: |
          LATEST_TAG=$(git describe --tags --abbrev=0 --all)
          echo "LATEST_TAG=$LATEST_TAG" >> $GITHUB_ENV
          echo "LATEST_VERSION=${LATEST_TAG:1}" >> $GITHUB_ENV
          
          echo "Latest tag: ${{ env.LATEST_TAG }}"
          echo "Latest version: ${{ env.LATEST_VERSION }}"

#      - name: Determine new version
#        run: |
#          if [ -z "${{ env.LATEST_TAG }}" ];
#          then
#            echo "NEW_VERSION=1.0.0" >> $GITHUB_ENV
#          else
#            LATEST_TAG=${{ env.LATEST_TAG }}
#            LATEST_VERSION=${{ env.LATEST_VERSION }}
#
#            MAJOR=$(echo "$LATEST_VERSION" | cut -d. -f1)
#            MINOR=$(echo "$LATEST_VERSION" | cut -d. -f2)
#            PATCH=$(echo "$LATEST_VERSION" | cut -d. -f3)
#
#            if git log "$LATEST_TAG"..HEAD --format=%B | grep -q 'Breaking:';
#            then
#              MAJOR=$((MAJOR + 1))
#              MINOR=0
#              PATCH=0
#            elif git log "$LATEST_TAG"..HEAD --format=%B | grep -q 'Feature:';
#            then
#              MINOR=$((MINOR + 1))
#              PATCH=0
#            elif git log "$LATEST_TAG"..HEAD --format=%B | grep -q 'Fix:';
#            then
#                PATCH=$((PATCH + 1))
#            else
#              echo "No version change needed"
#              exit 0
#            fi
#
#            NEW_VERSION="$MAJOR.$MINOR.$PATCH"
#            echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
#          fi
#
#      - name: Create and push tag
#        if: env.LATEST_VERSION != env.NEW_VERSION
#        run: |
#          git tag ${{ env.NEW_VERSION }}
#          git push origin ${{ env.NEW_VERSION }}