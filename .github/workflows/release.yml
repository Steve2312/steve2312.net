name: release
run-name: Release frontend, triggered by ${{ github.actor }}
on:
  push:
    branches: [ master ]
jobs:
#  build:
#    runs-on: ubuntu-latest
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v3
#
#      - name: Setup node
#        uses: actions/setup-node@v3
#        with:
#          node-version: '18.16.0'
#
#      - name: Install node dependencies
#        run: npm ci
#
#      - name: Build node project
#        run: npm run build
#
#      - name: Upload build artifacts
#        uses: actions/upload-artifact@v3
#        with:
#          name: build-artifacts
#          path: dist

  increment-version:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get tag version
        run: |
          LATEST_TAG=$(git describe --abbrev=0 --tags 2>/dev/null || echo "")
          echo "$LATEST_TAG"
          
          echo "LATEST_TAG=$(echo $LATEST_TAG)" >> $GITHUB_ENV

      - name: First release
        if: env.LATEST_TAG == ''
        run: |
          echo "NEW_TAG=1.0.0" >> $GITHUB_ENV

      - name: Determine next version
        if: env.LATEST_TAG != ''
        run: |
          LATEST_VERSION="${env.LATEST_TAG:1}"
          MAJOR=$(echo "$LATEST_VERSION" | cut -d. -f1)
          MINOR=$(echo "$LATEST_VERSION" | cut -d. -f2)
          PATCH=$(echo "$LATEST_VERSION" | cut -d. -f3)
          
          if git log "$LATEST_TAG"..HEAD --format=%B | grep -q 'Breaking:'; then
            MAJOR=$((MAJOR + 1))
            MINOR=0
            PATCH=0
          elif git log "$LATEST_TAG"..HEAD --format=%B | grep -q 'Feature:'; then
            MINOR=$((MINOR + 1))
            PATCH=0
          elif git log "$LATEST_TAG"..HEAD --format=%B | grep -q 'Fix:'; then
            PATCH=$((PATCH + 1))
          else
            echo "No version change needed"
            exit 0
          fi
          
          NEW_TAG="v$MAJOR.$MINOR.$PATCH"
          echo "NEW_TAG=NEW_TAG" >> $GITHUB_ENV

      - name: Create and push tag
        if: env.LATEST_TAG != env.NEW_TAG
        run: |
          git tag ${{ env.NEW_TAG }}
          git push origin ${{ env.NEW_TAG }}