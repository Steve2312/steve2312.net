name: release
run-name: Release frontend, triggered by ${{ github.actor }}
on:
  push:
    branches: [ master ]
permissions:
  contents: write
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: '18.16.0'

      - name: Install node dependencies
        run: npm ci

      - name: Build node project
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: dist

  versioning:
    runs-on: ubuntu-latest
    outputs:
      latest-tag: ${{ steps.get-tag-version.outputs.LATEST_TAG }}
      new-tag: ${{ steps.determine-next-version.outputs.NEW_TAG }}
      new-version: ${{ steps.determine-next-version.outputs.NEW_VERSION }}
    needs:
      - build
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get tag version
        id: get-tag-version
        run: |
          LATEST_TAG=$(git describe --abbrev=0 --tags 2>/dev/null || echo "")
          echo "$LATEST_TAG"
          
          echo "LATEST_TAG=$(echo $LATEST_TAG)" >> $GITHUB_ENV
          echo "LATEST_TAG=$(echo $LATEST_TAG)" >> $GITHUB_OUTPUT

      - name: Determine next version
        id: determine-next-version
        run: |
          if [ -z "$LATEST_TAG" ]; then
            echo "NEW_TAG=v1.0.0" >> $GITHUB_OUTPUT
            echo "NEW_VERSION=1.0.0" >> $GITHUB_OUTPUT
          else
            LATEST_VERSION="${LATEST_TAG:1}"
            MAJOR=$(echo "$LATEST_VERSION" | cut -d. -f1)
            MINOR=$(echo "$LATEST_VERSION" | cut -d. -f2)
            PATCH=$(echo "$LATEST_VERSION" | cut -d. -f3)
            
            if git log "$LATEST_TAG"..HEAD --format=%B | grep -q 'Breaking:'; then
              MAJOR=$((MAJOR + 1))
              MINOR=0
              PATCH=0
            elif git log "$LATEST_TAG"..HEAD --format=%B | grep -q 'Feature:'; then
              MINOR=$((MINOR + 1))
              PATCH=0
            elif git log "$LATEST_TAG"..HEAD --format=%B | grep -q 'Fix:'; then
              PATCH=$((PATCH + 1))
            else
              NEW_VERSION="${LATEST_TAG:1}"
              NEW_TAG=$LATEST_TAG
            
              echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
              echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_OUTPUT
            
              echo "NEW_TAG=$NEW_TAG" >> $GITHUB_ENV
              echo "NEW_TAG=$NEW_TAG" >> $GITHUB_OUTPUT
              exit 0
            fi
            
            NEW_VERSION="$MAJOR.$MINOR.$PATCH"
            NEW_TAG="v$MAJOR.$MINOR.$PATCH"
            
            echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
            echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_OUTPUT
          
            echo "NEW_TAG=$NEW_TAG" >> $GITHUB_ENV
            echo "NEW_TAG=$NEW_TAG" >> $GITHUB_OUTPUT
          fi

      - name: Create and push tag
        if: env.LATEST_TAG != env.NEW_TAG
        run: |
          git tag ${{ env.NEW_TAG }}
          git push origin ${{ env.NEW_TAG }}

  package:
    runs-on: ubuntu-latest
    needs:
      - versioning
    if: needs.versioning.outputs.latest-tag != needs.versioning.outputs.new-tag
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: dist

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push
        uses: docker/build-push-action@v3
        with:
          context: .
          file: Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/steve2312.net:${{ needs.versioning.outputs.new-version }}
